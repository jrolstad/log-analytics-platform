name: functions-deploy-prd

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    environment: production
    env:
        OCI_CLI_USER: ${{ secrets.USER_ID }}
        OCI_CLI_TENANCY: ${{ secrets.TENANT_ID }}
        OCI_CLI_FINGERPRINT: ${{ secrets.AUTH_FINGERPRINT }}
        OCI_CLI_KEY_CONTENT: ${{ secrets.AUTH_KEYFILE }}
        OCI_CLI_REGION: ${{ secrets.REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Golang
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.21.0'

      - name: Install Dependencies
        run: go mod download

      - name: Build Project
        run: go build ./...

      - name: Run Unit Tests
        run: go test ./...

      - name: Get OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: log-analyzer-prd
          compartment: ocid1.compartment.oc1..aaaaaaaafvwzrresb24efyix2yosf25wpvcw3idumlc2q4agztjegfklr4ha

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.2.1
        id: login-ocir
        with:
          auth_token: ${{ secrets.AUTH_TOKEN }}

      - name: Create Image Tag
        id: set-image-tag
        run: echo "::set-output name=image_tag::$(date +'%Y%m%d%H%M%S')"

      - name: Build and push a container image
        id: tag-and-push-image
        run: |
          docker build -f deployments/containers/file-receiver/Dockerfile -t file-receiver:${{ steps.set-image-tag.outputs.image_tag }} .
          docker tag file-receiver:${{ steps.set-image-tag.outputs.image_tag }} "${{ steps.get-ocir-repository.outputs.repo_path }}:filereceiver-${{ steps.set-image-tag.outputs.image_tag }}"
          docker push "${{ steps.get-ocir-repository.outputs.repo_path }}:filereceiver-${{ steps.set-image-tag.outputs.image_tag }}"
